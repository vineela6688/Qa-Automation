import type { ReporterRuntime } from 'allure-js-commons/sdk/reporter';
import type { WDIORuntimeMessage } from './types.js';
export declare class AllureReportState {
    private allureRuntime;
    private _scopesStack;
    private _executablesStack;
    private _fixturesStack;
    private _currentTestUuid?;
    private _currentTestName?;
    messages: WDIORuntimeMessage[];
    private _pendingHookMessages;
    private _isCapturingPendingHook;
    constructor(allureRuntime: ReporterRuntime);
    private _isRuntimeMessage;
    private _openSteps;
    private _openHookSteps;
    private _hookMeta;
    private _incHookSteps;
    private _decHookSteps;
    private _closeOpenedHookSteps;
    private _closeOpenedSteps;
    get hasPendingSuite(): boolean;
    get hasPendingTest(): boolean;
    get hasPendingStep(): boolean;
    get hasPendingHook(): boolean;
    get currentFeature(): string | undefined;
    private _openScope;
    private _closeScope;
    private _writeLastTest;
    private _startSuite;
    private _endSuite;
    private _startTest;
    private _addTestInfo;
    private _endTest;
    private _startHook;
    private _endHook;
    pushRuntimeMessage(message: WDIORuntimeMessage): void;
    processRuntimeMessage(): Promise<void>;
    private _attachPendingHookToCurrentTest;
}
//# sourceMappingURL=state.d.ts.map